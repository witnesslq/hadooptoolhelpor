/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

public partial class SqoopThrift {
  public interface Iface {
    string CreateTable(string host, string database, string userName, string password, string tableName, string hiveTaleb);
    #if SILVERLIGHT
    IAsyncResult Begin_CreateTable(AsyncCallback callback, object state, string host, string database, string userName, string password, string tableName, string hiveTaleb);
    string End_CreateTable(IAsyncResult asyncResult);
    #endif
    string ImportDataInHive(string host, string database, string userName, string password, string tableName, string hiveTaleb, string keyfield);
    #if SILVERLIGHT
    IAsyncResult Begin_ImportDataInHive(AsyncCallback callback, object state, string host, string database, string userName, string password, string tableName, string hiveTaleb, string keyfield);
    string End_ImportDataInHive(IAsyncResult asyncResult);
    #endif
    string ImportDataInHiveByWhere(string host, string database, string userName, string password, string tableName, string hiveTaleb, string where, List<string> columnNames, string keyfield);
    #if SILVERLIGHT
    IAsyncResult Begin_ImportDataInHiveByWhere(AsyncCallback callback, object state, string host, string database, string userName, string password, string tableName, string hiveTaleb, string where, List<string> columnNames, string keyfield);
    string End_ImportDataInHiveByWhere(IAsyncResult asyncResult);
    #endif
    string ExportData(string host, string database, string userName, string password, string tableName, string hiveTaleb);
    #if SILVERLIGHT
    IAsyncResult Begin_ExportData(AsyncCallback callback, object state, string host, string database, string userName, string password, string tableName, string hiveTaleb);
    string End_ExportData(IAsyncResult asyncResult);
    #endif
    string ExportDataUpdate(string host, string database, string userName, string password, string tableName, string hiveTaleb, string keyfield);
    #if SILVERLIGHT
    IAsyncResult Begin_ExportDataUpdate(AsyncCallback callback, object state, string host, string database, string userName, string password, string tableName, string hiveTaleb, string keyfield);
    string End_ExportDataUpdate(IAsyncResult asyncResult);
    #endif
  }

  public class Client : Iface {
    public Client(TProtocol prot) : this(prot, prot)
    {
    }

    public Client(TProtocol iprot, TProtocol oprot)
    {
      iprot_ = iprot;
      oprot_ = oprot;
    }

    protected TProtocol iprot_;
    protected TProtocol oprot_;
    protected int seqid_;

    public TProtocol InputProtocol
    {
      get { return iprot_; }
    }
    public TProtocol OutputProtocol
    {
      get { return oprot_; }
    }


    
    #if SILVERLIGHT
    public IAsyncResult Begin_CreateTable(AsyncCallback callback, object state, string host, string database, string userName, string password, string tableName, string hiveTaleb)
    {
      return send_CreateTable(callback, state, host, database, userName, password, tableName, hiveTaleb);
    }

    public string End_CreateTable(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_CreateTable();
    }

    #endif

    public string CreateTable(string host, string database, string userName, string password, string tableName, string hiveTaleb)
    {
      #if !SILVERLIGHT
      send_CreateTable(host, database, userName, password, tableName, hiveTaleb);
      return recv_CreateTable();

      #else
      var asyncResult = Begin_CreateTable(null, null, host, database, userName, password, tableName, hiveTaleb);
      return End_CreateTable(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_CreateTable(AsyncCallback callback, object state, string host, string database, string userName, string password, string tableName, string hiveTaleb)
    #else
    public void send_CreateTable(string host, string database, string userName, string password, string tableName, string hiveTaleb)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("CreateTable", TMessageType.Call, seqid_));
      CreateTable_args args = new CreateTable_args();
      args.Host = host;
      args.Database = database;
      args.UserName = userName;
      args.Password = password;
      args.TableName = tableName;
      args.HiveTaleb = hiveTaleb;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public string recv_CreateTable()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      CreateTable_result result = new CreateTable_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "CreateTable failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_ImportDataInHive(AsyncCallback callback, object state, string host, string database, string userName, string password, string tableName, string hiveTaleb, string keyfield)
    {
      return send_ImportDataInHive(callback, state, host, database, userName, password, tableName, hiveTaleb, keyfield);
    }

    public string End_ImportDataInHive(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_ImportDataInHive();
    }

    #endif

    public string ImportDataInHive(string host, string database, string userName, string password, string tableName, string hiveTaleb, string keyfield)
    {
      #if !SILVERLIGHT
      send_ImportDataInHive(host, database, userName, password, tableName, hiveTaleb, keyfield);
      return recv_ImportDataInHive();

      #else
      var asyncResult = Begin_ImportDataInHive(null, null, host, database, userName, password, tableName, hiveTaleb, keyfield);
      return End_ImportDataInHive(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_ImportDataInHive(AsyncCallback callback, object state, string host, string database, string userName, string password, string tableName, string hiveTaleb, string keyfield)
    #else
    public void send_ImportDataInHive(string host, string database, string userName, string password, string tableName, string hiveTaleb, string keyfield)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("ImportDataInHive", TMessageType.Call, seqid_));
      ImportDataInHive_args args = new ImportDataInHive_args();
      args.Host = host;
      args.Database = database;
      args.UserName = userName;
      args.Password = password;
      args.TableName = tableName;
      args.HiveTaleb = hiveTaleb;
      args.Keyfield = keyfield;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public string recv_ImportDataInHive()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      ImportDataInHive_result result = new ImportDataInHive_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "ImportDataInHive failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_ImportDataInHiveByWhere(AsyncCallback callback, object state, string host, string database, string userName, string password, string tableName, string hiveTaleb, string where, List<string> columnNames, string keyfield)
    {
      return send_ImportDataInHiveByWhere(callback, state, host, database, userName, password, tableName, hiveTaleb, where, columnNames, keyfield);
    }

    public string End_ImportDataInHiveByWhere(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_ImportDataInHiveByWhere();
    }

    #endif

    public string ImportDataInHiveByWhere(string host, string database, string userName, string password, string tableName, string hiveTaleb, string where, List<string> columnNames, string keyfield)
    {
      #if !SILVERLIGHT
      send_ImportDataInHiveByWhere(host, database, userName, password, tableName, hiveTaleb, where, columnNames, keyfield);
      return recv_ImportDataInHiveByWhere();

      #else
      var asyncResult = Begin_ImportDataInHiveByWhere(null, null, host, database, userName, password, tableName, hiveTaleb, where, columnNames, keyfield);
      return End_ImportDataInHiveByWhere(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_ImportDataInHiveByWhere(AsyncCallback callback, object state, string host, string database, string userName, string password, string tableName, string hiveTaleb, string where, List<string> columnNames, string keyfield)
    #else
    public void send_ImportDataInHiveByWhere(string host, string database, string userName, string password, string tableName, string hiveTaleb, string where, List<string> columnNames, string keyfield)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("ImportDataInHiveByWhere", TMessageType.Call, seqid_));
      ImportDataInHiveByWhere_args args = new ImportDataInHiveByWhere_args();
      args.Host = host;
      args.Database = database;
      args.UserName = userName;
      args.Password = password;
      args.TableName = tableName;
      args.HiveTaleb = hiveTaleb;
      args.Where = where;
      args.ColumnNames = columnNames;
      args.Keyfield = keyfield;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public string recv_ImportDataInHiveByWhere()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      ImportDataInHiveByWhere_result result = new ImportDataInHiveByWhere_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "ImportDataInHiveByWhere failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_ExportData(AsyncCallback callback, object state, string host, string database, string userName, string password, string tableName, string hiveTaleb)
    {
      return send_ExportData(callback, state, host, database, userName, password, tableName, hiveTaleb);
    }

    public string End_ExportData(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_ExportData();
    }

    #endif

    public string ExportData(string host, string database, string userName, string password, string tableName, string hiveTaleb)
    {
      #if !SILVERLIGHT
      send_ExportData(host, database, userName, password, tableName, hiveTaleb);
      return recv_ExportData();

      #else
      var asyncResult = Begin_ExportData(null, null, host, database, userName, password, tableName, hiveTaleb);
      return End_ExportData(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_ExportData(AsyncCallback callback, object state, string host, string database, string userName, string password, string tableName, string hiveTaleb)
    #else
    public void send_ExportData(string host, string database, string userName, string password, string tableName, string hiveTaleb)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("ExportData", TMessageType.Call, seqid_));
      ExportData_args args = new ExportData_args();
      args.Host = host;
      args.Database = database;
      args.UserName = userName;
      args.Password = password;
      args.TableName = tableName;
      args.HiveTaleb = hiveTaleb;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public string recv_ExportData()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      ExportData_result result = new ExportData_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "ExportData failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_ExportDataUpdate(AsyncCallback callback, object state, string host, string database, string userName, string password, string tableName, string hiveTaleb, string keyfield)
    {
      return send_ExportDataUpdate(callback, state, host, database, userName, password, tableName, hiveTaleb, keyfield);
    }

    public string End_ExportDataUpdate(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_ExportDataUpdate();
    }

    #endif

    public string ExportDataUpdate(string host, string database, string userName, string password, string tableName, string hiveTaleb, string keyfield)
    {
      #if !SILVERLIGHT
      send_ExportDataUpdate(host, database, userName, password, tableName, hiveTaleb, keyfield);
      return recv_ExportDataUpdate();

      #else
      var asyncResult = Begin_ExportDataUpdate(null, null, host, database, userName, password, tableName, hiveTaleb, keyfield);
      return End_ExportDataUpdate(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_ExportDataUpdate(AsyncCallback callback, object state, string host, string database, string userName, string password, string tableName, string hiveTaleb, string keyfield)
    #else
    public void send_ExportDataUpdate(string host, string database, string userName, string password, string tableName, string hiveTaleb, string keyfield)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("ExportDataUpdate", TMessageType.Call, seqid_));
      ExportDataUpdate_args args = new ExportDataUpdate_args();
      args.Host = host;
      args.Database = database;
      args.UserName = userName;
      args.Password = password;
      args.TableName = tableName;
      args.HiveTaleb = hiveTaleb;
      args.Keyfield = keyfield;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public string recv_ExportDataUpdate()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      ExportDataUpdate_result result = new ExportDataUpdate_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "ExportDataUpdate failed: unknown result");
    }

  }
  public class Processor : TProcessor {
    public Processor(Iface iface)
    {
      iface_ = iface;
      processMap_["CreateTable"] = CreateTable_Process;
      processMap_["ImportDataInHive"] = ImportDataInHive_Process;
      processMap_["ImportDataInHiveByWhere"] = ImportDataInHiveByWhere_Process;
      processMap_["ExportData"] = ExportData_Process;
      processMap_["ExportDataUpdate"] = ExportDataUpdate_Process;
    }

    protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
    private Iface iface_;
    protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

    public bool Process(TProtocol iprot, TProtocol oprot)
    {
      try
      {
        TMessage msg = iprot.ReadMessageBegin();
        ProcessFunction fn;
        processMap_.TryGetValue(msg.Name, out fn);
        if (fn == null) {
          TProtocolUtil.Skip(iprot, TType.Struct);
          iprot.ReadMessageEnd();
          TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
          oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
          x.Write(oprot);
          oprot.WriteMessageEnd();
          oprot.Transport.Flush();
          return true;
        }
        fn(msg.SeqID, iprot, oprot);
      }
      catch (IOException)
      {
        return false;
      }
      return true;
    }

    public void CreateTable_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      CreateTable_args args = new CreateTable_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      CreateTable_result result = new CreateTable_result();
      result.Success = iface_.CreateTable(args.Host, args.Database, args.UserName, args.Password, args.TableName, args.HiveTaleb);
      oprot.WriteMessageBegin(new TMessage("CreateTable", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void ImportDataInHive_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      ImportDataInHive_args args = new ImportDataInHive_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      ImportDataInHive_result result = new ImportDataInHive_result();
      result.Success = iface_.ImportDataInHive(args.Host, args.Database, args.UserName, args.Password, args.TableName, args.HiveTaleb, args.Keyfield);
      oprot.WriteMessageBegin(new TMessage("ImportDataInHive", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void ImportDataInHiveByWhere_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      ImportDataInHiveByWhere_args args = new ImportDataInHiveByWhere_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      ImportDataInHiveByWhere_result result = new ImportDataInHiveByWhere_result();
      result.Success = iface_.ImportDataInHiveByWhere(args.Host, args.Database, args.UserName, args.Password, args.TableName, args.HiveTaleb, args.Where, args.ColumnNames, args.Keyfield);
      oprot.WriteMessageBegin(new TMessage("ImportDataInHiveByWhere", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void ExportData_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      ExportData_args args = new ExportData_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      ExportData_result result = new ExportData_result();
      result.Success = iface_.ExportData(args.Host, args.Database, args.UserName, args.Password, args.TableName, args.HiveTaleb);
      oprot.WriteMessageBegin(new TMessage("ExportData", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void ExportDataUpdate_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      ExportDataUpdate_args args = new ExportDataUpdate_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      ExportDataUpdate_result result = new ExportDataUpdate_result();
      result.Success = iface_.ExportDataUpdate(args.Host, args.Database, args.UserName, args.Password, args.TableName, args.HiveTaleb, args.Keyfield);
      oprot.WriteMessageBegin(new TMessage("ExportDataUpdate", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class CreateTable_args : TBase
  {
    private string _host;
    private string _database;
    private string _userName;
    private string _password;
    private string _tableName;
    private string _hiveTaleb;

    public string Host
    {
      get
      {
        return _host;
      }
      set
      {
        __isset.host = true;
        this._host = value;
      }
    }

    public string Database
    {
      get
      {
        return _database;
      }
      set
      {
        __isset.database = true;
        this._database = value;
      }
    }

    public string UserName
    {
      get
      {
        return _userName;
      }
      set
      {
        __isset.userName = true;
        this._userName = value;
      }
    }

    public string Password
    {
      get
      {
        return _password;
      }
      set
      {
        __isset.password = true;
        this._password = value;
      }
    }

    public string TableName
    {
      get
      {
        return _tableName;
      }
      set
      {
        __isset.tableName = true;
        this._tableName = value;
      }
    }

    public string HiveTaleb
    {
      get
      {
        return _hiveTaleb;
      }
      set
      {
        __isset.hiveTaleb = true;
        this._hiveTaleb = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool host;
      public bool database;
      public bool userName;
      public bool password;
      public bool tableName;
      public bool hiveTaleb;
    }

    public CreateTable_args() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              Host = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              Database = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              UserName = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.String) {
              Password = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.String) {
              TableName = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.String) {
              HiveTaleb = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("CreateTable_args");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Host != null && __isset.host) {
        field.Name = "host";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Host);
        oprot.WriteFieldEnd();
      }
      if (Database != null && __isset.database) {
        field.Name = "database";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Database);
        oprot.WriteFieldEnd();
      }
      if (UserName != null && __isset.userName) {
        field.Name = "userName";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(UserName);
        oprot.WriteFieldEnd();
      }
      if (Password != null && __isset.password) {
        field.Name = "password";
        field.Type = TType.String;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Password);
        oprot.WriteFieldEnd();
      }
      if (TableName != null && __isset.tableName) {
        field.Name = "tableName";
        field.Type = TType.String;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(TableName);
        oprot.WriteFieldEnd();
      }
      if (HiveTaleb != null && __isset.hiveTaleb) {
        field.Name = "hiveTaleb";
        field.Type = TType.String;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(HiveTaleb);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("CreateTable_args(");
      sb.Append("Host: ");
      sb.Append(Host);
      sb.Append(",Database: ");
      sb.Append(Database);
      sb.Append(",UserName: ");
      sb.Append(UserName);
      sb.Append(",Password: ");
      sb.Append(Password);
      sb.Append(",TableName: ");
      sb.Append(TableName);
      sb.Append(",HiveTaleb: ");
      sb.Append(HiveTaleb);
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class CreateTable_result : TBase
  {
    private string _success;

    public string Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public CreateTable_result() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 0:
            if (field.Type == TType.String) {
              Success = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("CreateTable_result");
      oprot.WriteStructBegin(struc);
      TField field = new TField();

      if (this.__isset.success) {
        if (Success != null) {
          field.Name = "Success";
          field.Type = TType.String;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Success);
          oprot.WriteFieldEnd();
        }
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("CreateTable_result(");
      sb.Append("Success: ");
      sb.Append(Success);
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class ImportDataInHive_args : TBase
  {
    private string _host;
    private string _database;
    private string _userName;
    private string _password;
    private string _tableName;
    private string _hiveTaleb;
    private string _keyfield;

    public string Host
    {
      get
      {
        return _host;
      }
      set
      {
        __isset.host = true;
        this._host = value;
      }
    }

    public string Database
    {
      get
      {
        return _database;
      }
      set
      {
        __isset.database = true;
        this._database = value;
      }
    }

    public string UserName
    {
      get
      {
        return _userName;
      }
      set
      {
        __isset.userName = true;
        this._userName = value;
      }
    }

    public string Password
    {
      get
      {
        return _password;
      }
      set
      {
        __isset.password = true;
        this._password = value;
      }
    }

    public string TableName
    {
      get
      {
        return _tableName;
      }
      set
      {
        __isset.tableName = true;
        this._tableName = value;
      }
    }

    public string HiveTaleb
    {
      get
      {
        return _hiveTaleb;
      }
      set
      {
        __isset.hiveTaleb = true;
        this._hiveTaleb = value;
      }
    }

    public string Keyfield
    {
      get
      {
        return _keyfield;
      }
      set
      {
        __isset.keyfield = true;
        this._keyfield = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool host;
      public bool database;
      public bool userName;
      public bool password;
      public bool tableName;
      public bool hiveTaleb;
      public bool keyfield;
    }

    public ImportDataInHive_args() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              Host = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              Database = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              UserName = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.String) {
              Password = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.String) {
              TableName = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.String) {
              HiveTaleb = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.String) {
              Keyfield = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("ImportDataInHive_args");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Host != null && __isset.host) {
        field.Name = "host";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Host);
        oprot.WriteFieldEnd();
      }
      if (Database != null && __isset.database) {
        field.Name = "database";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Database);
        oprot.WriteFieldEnd();
      }
      if (UserName != null && __isset.userName) {
        field.Name = "userName";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(UserName);
        oprot.WriteFieldEnd();
      }
      if (Password != null && __isset.password) {
        field.Name = "password";
        field.Type = TType.String;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Password);
        oprot.WriteFieldEnd();
      }
      if (TableName != null && __isset.tableName) {
        field.Name = "tableName";
        field.Type = TType.String;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(TableName);
        oprot.WriteFieldEnd();
      }
      if (HiveTaleb != null && __isset.hiveTaleb) {
        field.Name = "hiveTaleb";
        field.Type = TType.String;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(HiveTaleb);
        oprot.WriteFieldEnd();
      }
      if (Keyfield != null && __isset.keyfield) {
        field.Name = "keyfield";
        field.Type = TType.String;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Keyfield);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("ImportDataInHive_args(");
      sb.Append("Host: ");
      sb.Append(Host);
      sb.Append(",Database: ");
      sb.Append(Database);
      sb.Append(",UserName: ");
      sb.Append(UserName);
      sb.Append(",Password: ");
      sb.Append(Password);
      sb.Append(",TableName: ");
      sb.Append(TableName);
      sb.Append(",HiveTaleb: ");
      sb.Append(HiveTaleb);
      sb.Append(",Keyfield: ");
      sb.Append(Keyfield);
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class ImportDataInHive_result : TBase
  {
    private string _success;

    public string Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public ImportDataInHive_result() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 0:
            if (field.Type == TType.String) {
              Success = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("ImportDataInHive_result");
      oprot.WriteStructBegin(struc);
      TField field = new TField();

      if (this.__isset.success) {
        if (Success != null) {
          field.Name = "Success";
          field.Type = TType.String;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Success);
          oprot.WriteFieldEnd();
        }
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("ImportDataInHive_result(");
      sb.Append("Success: ");
      sb.Append(Success);
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class ImportDataInHiveByWhere_args : TBase
  {
    private string _host;
    private string _database;
    private string _userName;
    private string _password;
    private string _tableName;
    private string _hiveTaleb;
    private string _where;
    private List<string> _columnNames;
    private string _keyfield;

    public string Host
    {
      get
      {
        return _host;
      }
      set
      {
        __isset.host = true;
        this._host = value;
      }
    }

    public string Database
    {
      get
      {
        return _database;
      }
      set
      {
        __isset.database = true;
        this._database = value;
      }
    }

    public string UserName
    {
      get
      {
        return _userName;
      }
      set
      {
        __isset.userName = true;
        this._userName = value;
      }
    }

    public string Password
    {
      get
      {
        return _password;
      }
      set
      {
        __isset.password = true;
        this._password = value;
      }
    }

    public string TableName
    {
      get
      {
        return _tableName;
      }
      set
      {
        __isset.tableName = true;
        this._tableName = value;
      }
    }

    public string HiveTaleb
    {
      get
      {
        return _hiveTaleb;
      }
      set
      {
        __isset.hiveTaleb = true;
        this._hiveTaleb = value;
      }
    }

    public string Where
    {
      get
      {
        return _where;
      }
      set
      {
        __isset.where = true;
        this._where = value;
      }
    }

    public List<string> ColumnNames
    {
      get
      {
        return _columnNames;
      }
      set
      {
        __isset.columnNames = true;
        this._columnNames = value;
      }
    }

    public string Keyfield
    {
      get
      {
        return _keyfield;
      }
      set
      {
        __isset.keyfield = true;
        this._keyfield = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool host;
      public bool database;
      public bool userName;
      public bool password;
      public bool tableName;
      public bool hiveTaleb;
      public bool where;
      public bool columnNames;
      public bool keyfield;
    }

    public ImportDataInHiveByWhere_args() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              Host = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              Database = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              UserName = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.String) {
              Password = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.String) {
              TableName = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.String) {
              HiveTaleb = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.String) {
              Where = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.List) {
              {
                ColumnNames = new List<string>();
                TList _list0 = iprot.ReadListBegin();
                for( int _i1 = 0; _i1 < _list0.Count; ++_i1)
                {
                  string _elem2 = null;
                  _elem2 = iprot.ReadString();
                  ColumnNames.Add(_elem2);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.String) {
              Keyfield = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("ImportDataInHiveByWhere_args");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Host != null && __isset.host) {
        field.Name = "host";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Host);
        oprot.WriteFieldEnd();
      }
      if (Database != null && __isset.database) {
        field.Name = "database";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Database);
        oprot.WriteFieldEnd();
      }
      if (UserName != null && __isset.userName) {
        field.Name = "userName";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(UserName);
        oprot.WriteFieldEnd();
      }
      if (Password != null && __isset.password) {
        field.Name = "password";
        field.Type = TType.String;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Password);
        oprot.WriteFieldEnd();
      }
      if (TableName != null && __isset.tableName) {
        field.Name = "tableName";
        field.Type = TType.String;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(TableName);
        oprot.WriteFieldEnd();
      }
      if (HiveTaleb != null && __isset.hiveTaleb) {
        field.Name = "hiveTaleb";
        field.Type = TType.String;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(HiveTaleb);
        oprot.WriteFieldEnd();
      }
      if (Where != null && __isset.where) {
        field.Name = "where";
        field.Type = TType.String;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Where);
        oprot.WriteFieldEnd();
      }
      if (ColumnNames != null && __isset.columnNames) {
        field.Name = "columnNames";
        field.Type = TType.List;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.String, ColumnNames.Count));
          foreach (string _iter3 in ColumnNames)
          {
            oprot.WriteString(_iter3);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (Keyfield != null && __isset.keyfield) {
        field.Name = "keyfield";
        field.Type = TType.String;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Keyfield);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("ImportDataInHiveByWhere_args(");
      sb.Append("Host: ");
      sb.Append(Host);
      sb.Append(",Database: ");
      sb.Append(Database);
      sb.Append(",UserName: ");
      sb.Append(UserName);
      sb.Append(",Password: ");
      sb.Append(Password);
      sb.Append(",TableName: ");
      sb.Append(TableName);
      sb.Append(",HiveTaleb: ");
      sb.Append(HiveTaleb);
      sb.Append(",Where: ");
      sb.Append(Where);
      sb.Append(",ColumnNames: ");
      sb.Append(ColumnNames);
      sb.Append(",Keyfield: ");
      sb.Append(Keyfield);
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class ImportDataInHiveByWhere_result : TBase
  {
    private string _success;

    public string Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public ImportDataInHiveByWhere_result() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 0:
            if (field.Type == TType.String) {
              Success = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("ImportDataInHiveByWhere_result");
      oprot.WriteStructBegin(struc);
      TField field = new TField();

      if (this.__isset.success) {
        if (Success != null) {
          field.Name = "Success";
          field.Type = TType.String;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Success);
          oprot.WriteFieldEnd();
        }
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("ImportDataInHiveByWhere_result(");
      sb.Append("Success: ");
      sb.Append(Success);
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class ExportData_args : TBase
  {
    private string _host;
    private string _database;
    private string _userName;
    private string _password;
    private string _tableName;
    private string _hiveTaleb;

    public string Host
    {
      get
      {
        return _host;
      }
      set
      {
        __isset.host = true;
        this._host = value;
      }
    }

    public string Database
    {
      get
      {
        return _database;
      }
      set
      {
        __isset.database = true;
        this._database = value;
      }
    }

    public string UserName
    {
      get
      {
        return _userName;
      }
      set
      {
        __isset.userName = true;
        this._userName = value;
      }
    }

    public string Password
    {
      get
      {
        return _password;
      }
      set
      {
        __isset.password = true;
        this._password = value;
      }
    }

    public string TableName
    {
      get
      {
        return _tableName;
      }
      set
      {
        __isset.tableName = true;
        this._tableName = value;
      }
    }

    public string HiveTaleb
    {
      get
      {
        return _hiveTaleb;
      }
      set
      {
        __isset.hiveTaleb = true;
        this._hiveTaleb = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool host;
      public bool database;
      public bool userName;
      public bool password;
      public bool tableName;
      public bool hiveTaleb;
    }

    public ExportData_args() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              Host = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              Database = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              UserName = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.String) {
              Password = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.String) {
              TableName = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.String) {
              HiveTaleb = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("ExportData_args");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Host != null && __isset.host) {
        field.Name = "host";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Host);
        oprot.WriteFieldEnd();
      }
      if (Database != null && __isset.database) {
        field.Name = "database";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Database);
        oprot.WriteFieldEnd();
      }
      if (UserName != null && __isset.userName) {
        field.Name = "userName";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(UserName);
        oprot.WriteFieldEnd();
      }
      if (Password != null && __isset.password) {
        field.Name = "password";
        field.Type = TType.String;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Password);
        oprot.WriteFieldEnd();
      }
      if (TableName != null && __isset.tableName) {
        field.Name = "tableName";
        field.Type = TType.String;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(TableName);
        oprot.WriteFieldEnd();
      }
      if (HiveTaleb != null && __isset.hiveTaleb) {
        field.Name = "hiveTaleb";
        field.Type = TType.String;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(HiveTaleb);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("ExportData_args(");
      sb.Append("Host: ");
      sb.Append(Host);
      sb.Append(",Database: ");
      sb.Append(Database);
      sb.Append(",UserName: ");
      sb.Append(UserName);
      sb.Append(",Password: ");
      sb.Append(Password);
      sb.Append(",TableName: ");
      sb.Append(TableName);
      sb.Append(",HiveTaleb: ");
      sb.Append(HiveTaleb);
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class ExportData_result : TBase
  {
    private string _success;

    public string Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public ExportData_result() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 0:
            if (field.Type == TType.String) {
              Success = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("ExportData_result");
      oprot.WriteStructBegin(struc);
      TField field = new TField();

      if (this.__isset.success) {
        if (Success != null) {
          field.Name = "Success";
          field.Type = TType.String;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Success);
          oprot.WriteFieldEnd();
        }
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("ExportData_result(");
      sb.Append("Success: ");
      sb.Append(Success);
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class ExportDataUpdate_args : TBase
  {
    private string _host;
    private string _database;
    private string _userName;
    private string _password;
    private string _tableName;
    private string _hiveTaleb;
    private string _keyfield;

    public string Host
    {
      get
      {
        return _host;
      }
      set
      {
        __isset.host = true;
        this._host = value;
      }
    }

    public string Database
    {
      get
      {
        return _database;
      }
      set
      {
        __isset.database = true;
        this._database = value;
      }
    }

    public string UserName
    {
      get
      {
        return _userName;
      }
      set
      {
        __isset.userName = true;
        this._userName = value;
      }
    }

    public string Password
    {
      get
      {
        return _password;
      }
      set
      {
        __isset.password = true;
        this._password = value;
      }
    }

    public string TableName
    {
      get
      {
        return _tableName;
      }
      set
      {
        __isset.tableName = true;
        this._tableName = value;
      }
    }

    public string HiveTaleb
    {
      get
      {
        return _hiveTaleb;
      }
      set
      {
        __isset.hiveTaleb = true;
        this._hiveTaleb = value;
      }
    }

    public string Keyfield
    {
      get
      {
        return _keyfield;
      }
      set
      {
        __isset.keyfield = true;
        this._keyfield = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool host;
      public bool database;
      public bool userName;
      public bool password;
      public bool tableName;
      public bool hiveTaleb;
      public bool keyfield;
    }

    public ExportDataUpdate_args() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              Host = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              Database = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              UserName = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.String) {
              Password = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.String) {
              TableName = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.String) {
              HiveTaleb = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.String) {
              Keyfield = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("ExportDataUpdate_args");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Host != null && __isset.host) {
        field.Name = "host";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Host);
        oprot.WriteFieldEnd();
      }
      if (Database != null && __isset.database) {
        field.Name = "database";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Database);
        oprot.WriteFieldEnd();
      }
      if (UserName != null && __isset.userName) {
        field.Name = "userName";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(UserName);
        oprot.WriteFieldEnd();
      }
      if (Password != null && __isset.password) {
        field.Name = "password";
        field.Type = TType.String;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Password);
        oprot.WriteFieldEnd();
      }
      if (TableName != null && __isset.tableName) {
        field.Name = "tableName";
        field.Type = TType.String;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(TableName);
        oprot.WriteFieldEnd();
      }
      if (HiveTaleb != null && __isset.hiveTaleb) {
        field.Name = "hiveTaleb";
        field.Type = TType.String;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(HiveTaleb);
        oprot.WriteFieldEnd();
      }
      if (Keyfield != null && __isset.keyfield) {
        field.Name = "keyfield";
        field.Type = TType.String;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Keyfield);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("ExportDataUpdate_args(");
      sb.Append("Host: ");
      sb.Append(Host);
      sb.Append(",Database: ");
      sb.Append(Database);
      sb.Append(",UserName: ");
      sb.Append(UserName);
      sb.Append(",Password: ");
      sb.Append(Password);
      sb.Append(",TableName: ");
      sb.Append(TableName);
      sb.Append(",HiveTaleb: ");
      sb.Append(HiveTaleb);
      sb.Append(",Keyfield: ");
      sb.Append(Keyfield);
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class ExportDataUpdate_result : TBase
  {
    private string _success;

    public string Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public ExportDataUpdate_result() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 0:
            if (field.Type == TType.String) {
              Success = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("ExportDataUpdate_result");
      oprot.WriteStructBegin(struc);
      TField field = new TField();

      if (this.__isset.success) {
        if (Success != null) {
          field.Name = "Success";
          field.Type = TType.String;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Success);
          oprot.WriteFieldEnd();
        }
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("ExportDataUpdate_result(");
      sb.Append("Success: ");
      sb.Append(Success);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
